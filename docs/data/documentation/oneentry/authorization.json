{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/oneentry\/authorization"]}],"hierarchy":{"paths":[["doc:\/\/OneEntry\/documentation\/OneEntry","doc:\/\/OneEntry\/documentation\/OneEntry\/AuthUsage"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OneEntry\/documentation\/OneEntry\/Authorization"},"kind":"article","abstract":[{"type":"text","text":"Management of user data such as password, names, etc."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"User authorization works on the principle of token exchange.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For the sake of simplicity, hide this process under the hood of the sdk. On"},{"type":"text","text":" "},{"type":"text","text":"You always have the opportunity to get all the data for more detailed configuration."},{"type":"text","text":" "},{"type":"text","text":"Tokens are automatically saved in a keychain to implement auto login."}]},{"anchor":"Authorization","type":"heading","level":2,"text":"Authorization"},{"code":["let email = \"oneentry@sample.com\"","try await AuthService.shared.auth(\"email\") {","    AuthData(marker: \"email_auth\", value: email)","    AuthData(marker: \"pass_auth\", value: \"password\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This method performs obtaining authorization tokens. SDK independently monitor their relevance.","type":"text"}],"type":"paragraph"},{"text":"Getting a user","level":2,"anchor":"Getting-a-user","type":"heading"},{"name":"Important","style":"important","type":"aside","content":[{"inlineContent":[{"text":"The method for obtaining user information is available only after successful authorization via sdk","type":"text"}],"type":"paragraph"}]},{"code":["let user = try await AuthService.shared.user"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Logout","level":2,"anchor":"Logout"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, the output can be implemented in different ways and without this method."},{"type":"text","text":" "},{"text":"However, its call is necessary to cancel authorization tokens","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The method for obtaining user information is available only after successful authorization via sdk","type":"text"}]}],"type":"aside","name":"Important","style":"important"},{"syntax":"swift","type":"codeListing","code":["let success = try await AuthService.shared.logout()"]},{"type":"heading","anchor":"Changing-user-data","level":2,"text":"Changing user data"},{"type":"paragraph","inlineContent":[{"text":"The method helps to change any data, including the password.","type":"text"}]},{"content":[{"inlineContent":[{"text":"The method for obtaining user information is available only after successful authorization via sdk","type":"text"}],"type":"paragraph"}],"style":"important","type":"aside","name":"Important"},{"code":["let success = try await service.changeUser(form: \"email_auth\", langCode: \"en_US\") {","    AuthDataContainer {","        AuthData(","            marker: \"pass_auth\",","            value: \"password\"","        )","    }","    ","    FormDataContainer {","        FormData(","            marker: \"name_auth\",","            value: \"Arthur\"","        )","    }","}"],"syntax":"swift","type":"codeListing"}]}],"metadata":{"role":"article","modules":[{"name":"OneEntry"}],"roleHeading":"Article","title":"User authorization and management"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/OneEntry\/documentation\/OneEntry\/Registration","doc:\/\/OneEntry\/documentation\/OneEntry\/ForgotPassword"],"generated":true,"title":"User authorization and management","anchor":"User-authorization-and-management"}],"references":{"doc://OneEntry/documentation/OneEntry/AuthUsage":{"abstract":[{"type":"text","text":"OneEntry supports user creation and control. This can be useful for creating various kinds of content such as bonus programs, delivery addresses, etc."}],"role":"collectionGroup","identifier":"doc:\/\/OneEntry\/documentation\/OneEntry\/AuthUsage","kind":"article","url":"\/documentation\/oneentry\/authusage","title":"AuthService","type":"topic"},"doc://OneEntry/documentation/OneEntry/Registration":{"url":"\/documentation\/oneentry\/registration","identifier":"doc:\/\/OneEntry\/documentation\/OneEntry\/Registration","kind":"article","title":"User registration and activation","role":"article","abstract":[{"text":"Registration and activation of new users. Verification using activation code.","type":"text"}],"type":"topic"},"oneentry-logo.png":{"identifier":"oneentry-logo.png","variants":[{"url":"\/images\/OneEntry\/oneentry-logo@2x.png","traits":["2x","light"]}],"type":"image","alt":"A technology icon representing the SlothCreator framework."},"doc://OneEntry/documentation/OneEntry/ForgotPassword":{"url":"\/documentation\/oneentry\/forgotpassword","identifier":"doc:\/\/OneEntry\/documentation\/OneEntry\/ForgotPassword","abstract":[{"text":"Changing the password in case the user has forgotten it","type":"text"}],"kind":"article","title":"Changing the password in case of loss of access to the account","type":"topic","role":"collectionGroup"},"doc://OneEntry/documentation/OneEntry":{"identifier":"doc:\/\/OneEntry\/documentation\/OneEntry","abstract":[{"text":"Simplifying Mobile App Development in Swift with OneEntry SDK","type":"text"}],"url":"\/documentation\/oneentry","role":"collection","kind":"symbol","type":"topic","title":"OneEntry","images":[{"type":"icon","identifier":"oneentry-logo.png"}]}}}