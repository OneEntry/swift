// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-tvos13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OneEntry
import Alamofire
import Foundation
import HMNetworking
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
final public class OneEntryTokenCredential : OneEntry.Credential {
  public init(token: Swift.String)
  final public var client: HMNetworking.HttpClient {
    get
  }
  @objc deinit
}
public struct OneEntryTextWithHeader : Swift.Identifiable, Swift.Decodable {
  public var id: Foundation.UUID {
    get
  }
  public let index: Foundation.UUID
  public let header: Swift.String
  public let htmlValue: Swift.String
  public let plainValue: Swift.String
  public typealias ID = Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryAdmin : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let identifier: Swift.String
  public let position: Swift.Int?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocalizeInfo : Swift.Decodable {
  public let title: Swift.String?
  public let content: OneEntry.InfoContent?
  public let menuTitle: Swift.String?
  public let htmlContent: Swift.String?
  public let plainContent: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct InfoContent : Swift.Decodable {
  public let value: Swift.String
  public let isEditorDisabled: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryBlock : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public var id: Swift.Int
  public var identifier: Swift.String
  public var position: Swift.Int
  public var type: Swift.String
  public var templateIdentifier: Swift.String?
  public var productPageUrls: [Swift.String]?
  public var localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public var attributeValues: [Swift.String : [Swift.String : OneEntry.OneEntryAttribute]]?
  public var products: [OneEntry.OneEntryProduct]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryAttribute : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryAttribute {
  public var stringValue: Swift.String? {
    get
  }
  public var imageValues: [OneEntry.OneEntryImage]? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var dateValue: OneEntry.OneEntryDate? {
    get
  }
  public var textWithHeaderValues: [OneEntry.OneEntryTextWithHeader]? {
    get
  }
  public var textValues: [OneEntry.OneEntryText]? {
    get
  }
  public var fileValues: [OneEntry.OneEntryFile]? {
    get
  }
  public var listValues: OneEntry.OneEntryList? {
    get
  }
}
public struct OneEntryTemplate : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let identifier: Swift.String
  public let generalTypeId: Swift.Int
  public let generalTypeName: Swift.String
  public let position: Swift.Int?
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryAllTemplates : Swift.Decodable {
  public let asDictionary: [Swift.String : [OneEntry.OneEntryTemplate]]
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryAllTemplates {
  public var forCatalogProducts: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forBasketPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forErrorPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forCatalogPages: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forProductPreview: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forProductPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forSimilarProductBlock: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forStatisticProductBlock: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forProductBlock: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forForm: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forFormField: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forNewsPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forNewsBlock: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forNewsPreview: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forOneNewsPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forUsualPage: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forTextBlock: [OneEntry.OneEntryTemplate] {
    get
  }
  public var forSliderBlock: [OneEntry.OneEntryTemplate] {
    get
  }
}
@_hasMissingDesignatedInitializers final public class OneEntryCore {
  @objc deinit
}
extension OneEntry.OneEntryCore {
  public static func initializeApp(_ domain: Swift.String, credentials: any OneEntry.Credential)
  public static func reset()
}
public struct OneEntryLocale : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let shortCode: Swift.String
  public let code: Swift.String
  public let name: Swift.String
  public let nativeName: Swift.String
  public let isActive: Swift.Bool
  public let image: Swift.String?
  public let position: Swift.Int?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryFilter : Swift.Encodable {
  public let attributeMarker: Swift.String
  public let conditionMarker: OneEntry.ConditionMarker
  public let conditionValue: any Swift.Encodable
  public let pageUrl: [Swift.String]
  public init(attributeMarker: Swift.String, conditionMarker: OneEntry.ConditionMarker, conditionValue: some Encodable, pageUrl: [Swift.String] = [])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct OneEntryPageConfig : Swift.Decodable {
  public let rowsPerPage: Swift.Int?
  public let productsPerRow: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Credential {
  var client: HMNetworking.HttpClient { get }
}
public enum ConditionMarker : Swift.String, Swift.Codable {
  case `in`
  case nin
  case eq
  case neq
  case mth
  case lth
  case exs
  case nexs
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OneEntryTemplatePreview : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let version: Swift.Int?
  public let identifier: Swift.String
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryProportion : Swift.Decodable {
  public let width: Swift.Double?
  public let height: Swift.Double?
  public let side: Swift.Double?
  public let marker: Swift.String
  public let alignmentType: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryText : Swift.Decodable {
  public let htmlValue: Swift.String
  public let plainValue: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class AttributesService {
  public static let shared: OneEntry.AttributesService
  #if compiler(>=5.3) && $AsyncAwait
  final public func attributes(from set: Swift.String, langCode: Swift.String) async throws -> [OneEntry.AttributeSet]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func attribute(with marker: Swift.String, from set: Swift.String, langCode: Swift.String) async throws -> OneEntry.AttributeSet
  #endif
  @objc deinit
}
public struct OneEntryProduct : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let price: Swift.Double?
  public let sku: Swift.String?
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public let relatedIds: [Swift.Int]
  public let templateIdentifier: Swift.String?
  public let attributeValues: [Swift.String : [Swift.String : OneEntry.OneEntryAttribute]]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntrySearchProduct : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let title: Swift.String
  public let pageId: Swift.Int
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryResult<T> : Swift.Decodable where T : Swift.Decodable {
  public let items: [T]
  public let total: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryGeneralType : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let type: Swift.String
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryForm : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public let identifier: Swift.String
  public let attributes: [OneEntry.FormAttribute]
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct FormAttribute : Swift.Decodable {
  public let type: Swift.String
  public let marker: Swift.String
  public let isVisible: Swift.Bool
  public var localizeInfos: OneEntry.LocalizeInfo
  public init(from decoder: any Swift.Decoder) throws
}
@_functionBuilder public struct FilterBuilder {
  public static func buildBlock(_ components: [OneEntry.OneEntryFilter]...) -> [OneEntry.OneEntryFilter]
  public static func buildExpression(_ expression: OneEntry.OneEntryFilter) -> [OneEntry.OneEntryFilter]
  public static func buildEither(first component: [OneEntry.OneEntryFilter]) -> [OneEntry.OneEntryFilter]
  public static func buildEither(second component: [OneEntry.OneEntryFilter]) -> [OneEntry.OneEntryFilter]
  public static func buildOptional(_ component: [OneEntry.OneEntryFilter]?) -> [OneEntry.OneEntryFilter]
}
public struct OneEntryError : Swift.Decodable {
  public var statusCode: Swift.Int?
  public var message: Swift.String
  public var pageData: OneEntry.OneEntryPage?
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol Treelike : Swift.Identifiable {
  var parentId: Swift.Int? { get set }
  var children: [Self]? { get set }
  func toNode() -> OneEntry.Node<Self>
}
extension OneEntry.Treelike {
  public func toNode() -> OneEntry.Node<Self>
}
public class Node<T> where T : OneEntry.Treelike {
  public init(item: T)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OneEntryTree<T> where T : OneEntry.Treelike {
  @objc deinit
}
final public class OneEntryCertificateCredential : OneEntry.Credential {
  final public let name: Swift.String
  final public let password: Swift.String
  final public let bundle: Foundation.Bundle
  public init(name: Swift.String, password: Swift.String? = nil, bundle: Foundation.Bundle = .main)
  final public var client: HMNetworking.HttpClient {
    get
  }
  @objc deinit
}
public protocol LocalizeContent {
  var localizeInfos: [Swift.String : OneEntry.LocalizeInfo]? { get }
  var attributeValues: [Swift.String : [Swift.String : OneEntry.OneEntryAttribute]]? { get }
  func localizeAttribute(_ marker: Swift.String, languageCode: Swift.String) -> OneEntry.OneEntryAttribute?
}
extension OneEntry.LocalizeContent {
  public func localizeAttribute(_ marker: Swift.String, languageCode: Swift.String) -> OneEntry.OneEntryAttribute?
  public func localizeInfo(languageCode: Swift.String) -> OneEntry.LocalizeInfo?
  public var localizeInfos: [Swift.String : OneEntry.LocalizeInfo]? {
    get
  }
  public var attributeValues: [Swift.String : [Swift.String : OneEntry.OneEntryAttribute]]? {
    get
  }
}
public struct OneEntryImage : Swift.Decodable {
  public let size: Swift.Int
  public let filename: Swift.String
  public let previewLink: Swift.String
  public let downloadLink: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentAccount : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public let identifier: Swift.String
  public let type: Swift.String
  public let isVisible: Swift.Bool
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryFile : Swift.Decodable {
  public let filename: Swift.String
  public let downloadLink: Swift.String
  public let size: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryFile {
  public var url: Foundation.URL? {
    get
  }
}
public struct ExtendedValue : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.ExtendedValue {
  public var stringValue: Swift.String? {
    get
  }
  public var imageValue: OneEntry.OneEntryImage? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var dateValue: OneEntry.OneEntryDate? {
    get
  }
  public var fileValue: OneEntry.OneEntryFile? {
    get
  }
}
public struct AttributeSet : Swift.Decodable {
  public let type: Swift.String
  public let marker: Swift.String
  public let position: Swift.Int
  public let listTitles: [OneEntry.OneEntryList]
  public let localizeInfos: OneEntry.LocalizeInfo?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @_functionBuilder final public class FormDataRequestBuilder {
  public static func buildEither(first component: [OneEntry.OneEntryFormData]) -> [OneEntry.OneEntryFormData]
  public static func buildEither(second component: [OneEntry.OneEntryFormData]) -> [OneEntry.OneEntryFormData]
  public static func buildOptional(_ component: [OneEntry.OneEntryFormData]?) -> [OneEntry.OneEntryFormData]
  public static func buildBlock(_ components: [OneEntry.OneEntryFormData]...) -> [OneEntry.OneEntryFormData]
  public static func buildExpression(_ expression: OneEntry.OneEntryFormData) -> [OneEntry.OneEntryFormData]
  @objc deinit
}
public struct OneEntryDate : Swift.Decodable {
  public var fullDate: Swift.String
  public var formatString: Swift.String
  public var formattedValue: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryDate {
  public func date(format: Swift.String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ") -> Foundation.Date?
}
public struct OneEntryMenu : Swift.Identifiable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let identifier: Swift.String
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public let pages: [OneEntry.OneEntryMenuPage]
  public typealias ID = Swift.Int
}
extension OneEntry.OneEntryMenu : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum SortDirection : Swift.String, Swift.Decodable {
  case desk
  case asc
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OneEntryFormDataRequest : Swift.Encodable {
  public let formIdentifier: Swift.String
  public let formData: [Swift.String : [OneEntry.OneEntryFormData]]
  public init(formIdentifier: Swift.String, formData: [Swift.String : [OneEntry.OneEntryFormData]])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct OneEntryFormData : Swift.Codable {
  public let marker: Swift.String
  public let value: Swift.String
  public init(marker: Swift.String, value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryFormDataResponse : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let time: Swift.String
  public let formIdentifier: Swift.String
  public let formData: [Swift.String : [OneEntry.OneEntryFormData]]
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryPage : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public var parentId: Swift.Int?
  public let pageUrl: Swift.String
  public let depth: Swift.Int?
  public let isVisible: Swift.Bool?
  public let position: Swift.Int?
  public let type: Swift.String?
  public let templateIdentifier: Swift.String?
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public let attributeValues: [Swift.String : [Swift.String : OneEntry.OneEntryAttribute]]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryMenuPage : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent, OneEntry.Treelike {
  public let id: Swift.Int
  public var parentId: Swift.Int?
  public let pageUrl: Swift.String
  public let position: Swift.Int
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public var children: [OneEntry.OneEntryMenuPage]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntrySearchPage : Swift.Identifiable, Swift.Decodable {
  public let id: Swift.Int
  public let title: Swift.String
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneEntryList : Swift.Decodable {
  public let title: Swift.String
  public let value: Swift.String
  public let extended: OneEntry.ExtendedValue?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class PagesService {
  public static let shared: OneEntry.PagesService
  #if compiler(>=5.3) && $AsyncAwait
  final public func rootPages(langCode: Swift.String) async throws -> [OneEntry.OneEntryPage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func children(for pageURL: Swift.String, langCode: Swift.String) async throws -> [OneEntry.OneEntryPage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func catalogPages(langCode: Swift.String, limit: Swift.Int = 30, offset: Swift.Int = 0) async throws -> [OneEntry.OneEntryPage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func pages(langCode: Swift.String) async throws -> [OneEntry.OneEntryPage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func page(with id: Swift.Int, langCode: Swift.String) async throws -> OneEntry.OneEntryPage
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func page(with url: Swift.String, langCode: Swift.String) async throws -> OneEntry.OneEntryPage
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func config(with url: Swift.String) async throws -> OneEntry.OneEntryPageConfig
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func quickSearch(_ name: Swift.String, langCode: Swift.String) async throws -> [OneEntry.OneEntrySearchPage]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func blocks(page url: Swift.String, langCode: Swift.String) async throws -> [OneEntry.OneEntryBlock]
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TemplatesPreviewService {
  public static let shared: OneEntry.TemplatesPreviewService
  #if compiler(>=5.3) && $EffectfulProp
  final public var templates: [OneEntry.OneEntryTemplatePreview] {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func template(with id: Swift.Int) async throws -> OneEntry.OneEntryTemplatePreview
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func template(with marker: Swift.String) async throws -> OneEntry.OneEntryTemplatePreview
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ProjectService {
  public static let shared: OneEntry.ProjectService
  #if compiler(>=5.3) && $EffectfulProp
  final public var activeLocales: [OneEntry.OneEntryLocale] {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  final public var admins: [OneEntry.OneEntryAdmin] {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  final public var generalTypes: [OneEntry.OneEntryGeneralType] {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func test404() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func test500() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func menu(with marker: Swift.String) async throws -> OneEntry.OneEntryMenu
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func uploadFile(fileURL: Foundation.URL, type: Swift.String, entity: Swift.String, id: Swift.Int, width: Swift.Int? = nil, height: Swift.Int? = nil, compress: Swift.Bool = false) async throws -> [OneEntry.OneEntryFile]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func file(name: Swift.String, type: Swift.String, entity: Swift.String, id: Swift.Int) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deleteFile(name: Swift.String, type: Swift.String, entity: Swift.String, id: Swift.Int) async throws
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FormsService {
  public static let shared: OneEntry.FormsService
  #if compiler(>=5.3) && $AsyncAwait
  final public func forms(offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String) async throws -> [OneEntry.OneEntryForm]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func form(with marker: Swift.String, langCode: Swift.String) async throws -> OneEntry.OneEntryForm
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func sendData(with identifier: Swift.String, locale: Swift.String, @OneEntry.FormDataRequestBuilder data: () -> [OneEntry.OneEntryFormData]) async throws -> OneEntry.OneEntryFormDataResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchData(langCode: Swift.String, limit: Swift.Int = 30, offset: Swift.Int = 0) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryFormDataResponse>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func data(with marker: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 30) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryFormDataResponse>
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CatalogService {
  public static let shared: OneEntry.CatalogService
  #if compiler(>=5.3) && $AsyncAwait
  final public func products(offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, statusMarker: Swift.String? = nil, conditionValue: Swift.String? = nil, conditionMarker: OneEntry.ConditionMarker? = nil, attributeMarker: Swift.String? = nil, sortKey: Swift.String? = nil, sortOrder: OneEntry.SortDirection? = nil) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func emptyPageProducts(offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, sortKey: Swift.String? = nil, sortOrder: OneEntry.SortDirection? = nil) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func products(page id: Swift.Int, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, sortKey: Swift.String? = nil, sortOrder: OneEntry.SortDirection? = nil) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func products(page url: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, sortKey: Swift.String? = nil, sortOrder: OneEntry.SortDirection? = nil) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func relatedProducts(product id: Swift.Int, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, sortKey: Swift.String? = nil, sortOrder: OneEntry.SortDirection? = nil) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func product(with id: Swift.Int, langCode: Swift.String) async throws -> OneEntry.OneEntryProduct
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func blocks(for id: Swift.Int) async throws -> [OneEntry.OneEntryBlock]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func filterProducts(offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String, sortOrder: OneEntry.SortDirection? = nil, sortKey: Swift.String? = nil, @OneEntry.FilterBuilder builder: () -> [OneEntry.OneEntryFilter]) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func quickSearch(_ name: Swift.String, langCode: Swift.String) async throws -> [OneEntry.OneEntrySearchProduct]
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  final public var productStatuses: [OneEntry.OneEntryProductStatus] {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func productStatus(with id: Swift.Int) async throws -> OneEntry.OneEntryProductStatus
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func productStatus(with marker: Swift.String) async throws -> OneEntry.OneEntryProductStatus
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func productStatusMarkerValidation(_ marker: Swift.String) async throws -> Swift.Bool
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BlocksService {
  public static let shared: OneEntry.BlocksService
  #if compiler(>=5.3) && $AsyncAwait
  final public func similarProducts(_ marker: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func products(_ marker: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String) async throws -> OneEntry.OneEntryResult<OneEntry.OneEntryProduct>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func blocks(offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String) async throws -> [OneEntry.OneEntryBlock]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func block(_ marker: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 30, langCode: Swift.String) async throws -> OneEntry.OneEntryBlock
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TemplatesService {
  public static let shared: OneEntry.TemplatesService
  #if compiler(>=5.3) && $EffectfulProp
  final public var templates: OneEntry.OneEntryAllTemplates {
    get async throws
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func templates(with type: Swift.String) async throws -> [OneEntry.OneEntryTemplate]
  #endif
  @objc deinit
}
public enum AttributeType : Swift.String, Swift.CaseIterable, Swift.Decodable {
  case integer
  case date
  case file
  case list
  case real
  case spam
  case text
  case time
  case float
  case button
  case image
  case string
  case dateTime
  case textWithHeader
  case groupOfImages
  case radioButton
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OneEntry.AttributeType]
  public typealias RawValue = Swift.String
  public static var allCases: [OneEntry.AttributeType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct OneEntryProductStatus : Swift.Identifiable, Swift.Decodable, OneEntry.LocalizeContent {
  public let id: Swift.Int
  public let updatedDate: Swift.String?
  public let version: Swift.Int
  public let identifier: Swift.String
  public let localizeInfos: [Swift.String : OneEntry.LocalizeInfo]?
  public typealias ID = Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
extension OneEntry.OneEntryProductStatus {
  #if compiler(>=5.3) && $EffectfulProp
  public var markerValidation: Swift.Bool {
    get async throws
  }
  #endif
}
extension OneEntry.ConditionMarker : Swift.Equatable {}
extension OneEntry.ConditionMarker : Swift.Hashable {}
extension OneEntry.ConditionMarker : Swift.RawRepresentable {}
extension OneEntry.SortDirection : Swift.Equatable {}
extension OneEntry.SortDirection : Swift.Hashable {}
extension OneEntry.SortDirection : Swift.RawRepresentable {}
extension OneEntry.AttributeType : Swift.Equatable {}
extension OneEntry.AttributeType : Swift.Hashable {}
extension OneEntry.AttributeType : Swift.RawRepresentable {}
